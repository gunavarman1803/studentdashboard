'use strict';

var tslib_es6 = require('../../node_modules/tslib/tslib.es6.js');

var filterColumns = function (items, columnFilter, columnFilterState, itemsDataColumns) {
    if (columnFilter && typeof columnFilter === 'object' && columnFilter.external) {
        return items;
    }
    Object.entries(columnFilterState).forEach(function (_a) {
        var key = _a[0], value = _a[1];
        if (value instanceof Function) {
            items = items.filter(function (item) { return value(item[key]); });
            return;
        }
        var columnFilter = String(value).toLowerCase();
        if (columnFilter && itemsDataColumns.includes(key)) {
            items = items.filter(function (item) {
                return String(item[key]).toLowerCase().includes(columnFilter);
            });
        }
    });
    return items;
};
var filterTable = function (items, tableFilter, tableFilterState, itemsDataColumns) {
    if (!tableFilterState ||
        (tableFilter && typeof tableFilter === 'object' && tableFilter.external)) {
        return items;
    }
    var filter = tableFilterState.toLowerCase();
    var valueContainFilter = function (val) { return String(val).toLowerCase().includes(filter); };
    items = items.filter(function (item) {
        return !!itemsDataColumns.find(function (key) { return valueContainFilter(item[key]); });
    });
    return items;
};
var getClickedColumnName = function (target, columnNames, selectable) {
    var closest = target.closest('tr');
    var children = closest ? Array.from(closest.children) : [];
    var clickedCell = children.filter(function (child) { return child.contains(target); })[0];
    return selectable ? columnNames[children.indexOf(clickedCell) - 1] : columnNames[children.indexOf(clickedCell)];
};
var getColumnKey = function (column) {
    return typeof column === 'object' ? column.key : column;
};
var getColumnLabel = function (column) {
    return typeof column === 'object'
        ? column.label !== undefined
            ? column.label
            : pretifyName(column.key)
        : pretifyName(column);
};
var getColumnName = function (column) {
    if (typeof column === 'object') {
        return column.key;
    }
    return column;
};
var getColumnNames = function (columns, items) {
    if (columns) {
        var _columns = [];
        for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
            var column = columns_1[_i];
            if (typeof column === 'object' && column.children) {
                _columns.push.apply(_columns, getColumnNames(column.children, []));
                continue;
            }
            typeof column === 'object' ? _columns.push(column.key) : _columns.push(column);
        }
        return _columns;
    }
    return getColumnNamesFromItems(items);
};
var getColumns = function (_columns) {
    var columns = [];
    for (var _i = 0, _columns_1 = _columns; _i < _columns_1.length; _i++) {
        var column = _columns_1[_i];
        if (typeof column === 'object' && column.group && column.children) {
            columns.push.apply(columns, getColumns(column.children));
            continue;
        }
        if (typeof column === 'object' && column.children) {
            columns.push.apply(columns, getColumns(column.children));
        }
        columns.push(column);
    }
    return columns;
};
var countColumns = function (columns, counter) {
    if (counter === void 0) { counter = 0; }
    var _counter = counter;
    for (var _i = 0, columns_2 = columns; _i < columns_2.length; _i++) {
        var column = columns_2[_i];
        if (!column.children) {
            _counter++;
        }
        if (column.children) {
            _counter = countColumns(column.children, _counter);
        }
    }
    return _counter;
};
var getColumnGroups = function (columns) {
    var groups = [];
    var traverseColumns = function (column, deep, colSpan) {
        if (deep === void 0) { deep = 0; }
        var groups = [];
        if (column.children) {
            for (var _i = 0, _a = column.children; _i < _a.length; _i++) {
                var _column = _a[_i];
                if (!_column.group) ;
                groups.push.apply(groups, traverseColumns(_column, deep + 1));
            }
        }
        if (typeof column === 'object' && column.group) {
            var children = column.children, group = column.group, rest = tslib_es6.__rest(column, ["children", "group"]);
            groups.push(tslib_es6.__assign(tslib_es6.__assign({ deep: deep, label: group }, (children && { colspan: countColumns(children) })), rest));
        }
        return groups;
    };
    if (columns) {
        for (var _i = 0, columns_3 = columns; _i < columns_3.length; _i++) {
            var column = columns_3[_i];
            if (typeof column === 'object' && column.group) {
                var objects = traverseColumns(column);
                if (objects) {
                    for (var _a = 0, objects_1 = objects; _a < objects_1.length; _a++) {
                        var object = objects_1[_a];
                        var deep = object.deep, rest = tslib_es6.__rest(object, ["deep"]);
                        if (deep === undefined) {
                            continue;
                        }
                        for (var i = 0; i < deep; i++) {
                            if (groups[i]) {
                                continue;
                            }
                            groups.push([]);
                        }
                        if (groups[deep]) {
                            groups[deep].push(rest);
                        }
                        else {
                            groups.push([rest]);
                        }
                    }
                }
            }
        }
    }
    return groups;
};
var getColumnNamesFromItems = function (items) {
    return Object.keys(items[0] || {}).filter(function (el) { return el.charAt(0) !== '_'; });
};
var getColumnSorterState = function (key, sorterState) {
    if (sorterState && sorterState.column === key) {
        if (sorterState.state) {
            return sorterState.state;
        }
        return 0;
    }
    return 0;
};
var getColumnValues = function (items, key) {
    return items.map(function (item) { return item[key]; });
};
var getTableDataCellProps = function (column, item, colName) {
    var props = {};
    if (typeof column === 'object' && column._colProps) {
        Object.assign(props, column._colProps);
    }
    if (item._cellProps && item._cellProps['all']) {
        Object.assign(props, item._cellProps['all']);
    }
    if (item._cellProps && item._cellProps[colName]) {
        Object.assign(props, item._cellProps[colName]);
    }
    return props;
};
var getTableDataCellStyles = function (column, item, colName) {
    var styles = {};
    if (typeof column === 'object' && column._colStyle) {
        Object.assign(styles, column._colStyle);
    }
    if (item._cellStyle && item._cellStyle['all']) {
        Object.assign(styles, item._cellStyle['all']);
    }
    if (item._cellStyle && item._cellStyle[colName]) {
        Object.assign(styles, item._cellStyle[colName]);
    }
    return styles;
};
var getTableHeaderCellProps = function (column) {
    if (typeof column === 'object' && column._props) {
        return column._props;
    }
    return {};
};
var getTableHeaderCellStyles = function (column, columnSorter) {
    var style = {};
    if (columnSorter &&
        (typeof column !== 'object' ||
            (typeof column === 'object' && (column.sorter === undefined || column.sorter)))) {
        style['cursor'] = 'pointer';
    }
    if (typeof column === 'object' && column._style) {
        return tslib_es6.__assign(tslib_es6.__assign({}, style), column._style);
    }
    return style;
};
var isSortable = function (i, columns, columnSorter, itemsDataColumns, columnNames) {
    var isDataColumn = itemsDataColumns.includes(columnNames[i]);
    var column;
    if (columns)
        column = columns[i];
    return (columnSorter &&
        (!columns ||
            typeof column !== 'object' ||
            (typeof column === 'object' && (column.sorter === undefined || column.sorter))) &&
        isDataColumn);
};
var pretifyName = function (name) {
    return name
        .replace(/[-_.]/g, ' ')
        .replace(/ +/g, ' ')
        .replace(/([a-z0-9])([A-Z])/g, '$1 $2')
        .split(' ')
        .map(function (word) { return word.charAt(0).toUpperCase() + word.slice(1); })
        .join(' ');
};
var sortItems = function (columnSorter, items, itemsDataColumns, sorterState) {
    var column = sorterState.column;
    if (!column ||
        !itemsDataColumns.includes(column) ||
        (columnSorter && typeof columnSorter === 'object' && columnSorter.external)) {
        return items;
    }
    var flip = sorterState.state === 'asc' ? 1 : sorterState.state === 'desc' ? -1 : 0;
    var sorted = items.slice().sort(function (item, item2) {
        var value = item[column];
        var value2 = item2[column];
        var a = typeof value === 'number' ? value : String(value).toLowerCase();
        var b = typeof value2 === 'number' ? value2 : String(value2).toLowerCase();
        return a > b ? 1 * flip : b > a ? -1 * flip : 0;
    });
    return sorted;
};

exports.countColumns = countColumns;
exports.filterColumns = filterColumns;
exports.filterTable = filterTable;
exports.getClickedColumnName = getClickedColumnName;
exports.getColumnGroups = getColumnGroups;
exports.getColumnKey = getColumnKey;
exports.getColumnLabel = getColumnLabel;
exports.getColumnName = getColumnName;
exports.getColumnNames = getColumnNames;
exports.getColumnNamesFromItems = getColumnNamesFromItems;
exports.getColumnSorterState = getColumnSorterState;
exports.getColumnValues = getColumnValues;
exports.getColumns = getColumns;
exports.getTableDataCellProps = getTableDataCellProps;
exports.getTableDataCellStyles = getTableDataCellStyles;
exports.getTableHeaderCellProps = getTableHeaderCellProps;
exports.getTableHeaderCellStyles = getTableHeaderCellStyles;
exports.isSortable = isSortable;
exports.pretifyName = pretifyName;
exports.sortItems = sortItems;
//# sourceMappingURL=utils.js.map
